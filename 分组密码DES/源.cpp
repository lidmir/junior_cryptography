#include<iostream>
#include<iomanip>
using namespace std;

//要进行加解密的明密文组(测试数据)
struct des_test_case 
{    
	int num, mode; // mode 1 = encrypt  
	int key[8],txt[8],out[8];
} 
cases[] = {
        { 0, 1,     { 0x10, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
                    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 } },
        { 1, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 },
                    { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 2, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0xDD, 0x7F, 0x12, 0x1C, 0xA5, 0x01, 0x56, 0x19 },
                    { 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 3, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x2E, 0x86, 0x53, 0x10, 0x4F, 0x38, 0x34, 0xEA },
                    { 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 4, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x4B, 0xD3, 0x88, 0xFF, 0x6C, 0xD8, 0x1D, 0x4F },
                    { 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 5, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x20, 0xB9, 0xE7, 0x67, 0xB2, 0xFB, 0x14, 0x56 },
                    { 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 6, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x55, 0x57, 0x93, 0x80, 0xD7, 0x71, 0x38, 0xEF },
                    { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 7, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x6C, 0xC5, 0xDE, 0xFA, 0xAF, 0x04, 0x51, 0x2F },
                    { 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 8, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x0D, 0x9F, 0x27, 0x9B, 0xA5, 0xD8, 0x72, 0x60 }, 
                    { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 9, 1,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0xD9, 0x03, 0x1B, 0x02, 0x71, 0xBD, 0x5A, 0x0A },
                    { 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
},
	
	cases1[] = {
		{ 0, 0,     { 0x10, 0x31, 0x6E, 0x02, 0x8C, 0x8F, 0x3B, 0x4A },
                    { 0x82, 0xDC, 0xBA, 0xFB, 0xDE, 0xAB, 0x66, 0x02 },
                    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
        { 1, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00 } },
        { 2, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0xDD, 0x7F, 0x12, 0x1C, 0xA5, 0x01, 0x56, 0x19 } },
        { 3, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x2E, 0x86, 0x53, 0x10, 0x4F, 0x38, 0x34, 0xEA } },
        { 4, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x4B, 0xD3, 0x88, 0xFF, 0x6C, 0xD8, 0x1D, 0x4F } },
        { 5, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x20, 0xB9, 0xE7, 0x67, 0xB2, 0xFB, 0x14, 0x56 } },
        { 6, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x55, 0x57, 0x93, 0x80, 0xD7, 0x71, 0x38, 0xEF } },
        { 7, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x6C, 0xC5, 0xDE, 0xFA, 0xAF, 0x04, 0x51, 0x2F } },
        { 8, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0x0D, 0x9F, 0x27, 0x9B, 0xA5, 0xD8, 0x72, 0x60 } }, 
        { 9, 0,     { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 },
                    { 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
                    { 0xD9, 0x03, 0x1B, 0x02, 0x71, 0xBD, 0x5A, 0x0A } }
};

//要使用的密钥
int FinalKey[16][48];
//初始置换矩阵IP
int IP[64]=
{
	58,50,42,34,26,18,10,2,
	60,52,44,36,28,20,12,4,
	62,54,46,38,30,22,14,6,
	64,56,48,40,32,24,16,8,
	57,49,41,33,25,17,9,1,
	59,51,43,35,27,19,11,3,
	61,53,45,37,29,21,13,5,
	63,55,47,39,31,23,15,7
};
//逆初始置换矩阵IP1
int IP1[64]=
{
	40,8,48,16,56,24,64,32,
	39,7,47,15,55,23,63,31,
    38,6,46,14,54,22,62,30,
	37,5,45,13,53,21,61,29,
    36,4,44,12,52,20,60,28,
	35,3,43,11,51,19,59,27,
    34,2,42,10,50,18,58,26,
	33,1,41,9,49,17,57,25
};
//扩展运算E矩阵
int E[48]=
{
	32,1,2,3,4,5,4,5,
	6,7,8,9,8,9,10,11,
	12,13,12,13,14,15,16,17,
	16,17,18,19,20,21,20,21,
	22,23,24,25,24,25,26,27,
	28,29,28,29,30,31,32,1
};
//置换运算P矩阵
int P[32]=
{
	16,7,20,21,29,12,28,17,
	1,15,23,26,5,18,31,10,
	2,8,24,14,32,27,3,9,
	19,13,30,6,22,11,4,25
};
//S盒
int SBox[32][16]=
{
	//S1     
	{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},
	{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},
	{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},
	{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13},
	//S2  
	{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},
	{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},
	{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},
	{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9},
	//S3  
	{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},
	{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},
	{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},
	{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12},
	//S4  
	{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},
	{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},
	{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},
	{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14},
	//S5  
	{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},
	{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},
	{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},
	{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3},
	//S6  
	{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},
	{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},
	{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},
	{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13},
	//S7  
	{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},
	{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},
	{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},
	{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12},
	//S8  
	{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},
	{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},
	{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},
	{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}
};
//密钥置换选择1
int PC1[56]=
{  
	57,49,41,33,25,17,9,1,
	58,50,42,34,26,18,10,2,
	59,51,43,35,27,19,11,3,
	60,52,44,36,63,55,47,39,
	31,23,15,7,62,54,46,38,
	30,22,14,6,61,53,45,37,
	29,21,13,5,28,20,12,4
};
//密钥置换选择2
int PC2[48]=
{
	14,17,11,24,1,5,3,28,
	15,6,21,10,23,19,12,4,
	26,8,16,7,27,20,13,2,
	41,52,31,37,47,55,30,40,
	51,45,33,48,44,49,39,56,
	34,53,46,42,50,36,29,32
};
//密钥左循环移位位数
int LS[16]=
{
	1,1,2,2,2,2,2,2,
	1,2,2,2,2,2,2,1
};

//初始置换
void InitialP(int str[64]) {  
    int temp[64];  
    for (int i=0;i<64;i++)  
        temp[i]=str[IP[i]-1];  
    memcpy(str,temp,sizeof(temp));  
} 
//逆初始置换
void InitialP1(int str[64]) {  
    int temp[64];  
    for (int i=0;i<64;i++)  
        temp[i]=str[IP1[i]-1];  
    memcpy(str,temp,sizeof(temp));  
}
//扩展运算E
void ExtendE(int str[32],int finalstr[48])
{
	 for (int i=0;i<48;i++)        
		 finalstr[i]=str[E[i]-1];
}
//置换运算P
void PermutationP(int str[32])
{
	int temp[32];
	for(int i=0;i<32;i++)
		temp[i]=str[P[i]-1];
	memcpy(str,temp,sizeof(temp));
}
//F函数
void FFunc(int FirstR[32],int key[48])
{
	//扩展运算E
	int R[48];
	ExtendE(FirstR,R);
	//XOR
	int temp[48];
	for(int i=0;i<48;i++)
		temp[i]=R[i]^key[i];
	//通过S盒(代换/选择)
	int FinalR[32];
	for(int i=0;i<8;i++)
	{
		int row=(temp[i*6]<<1)+(temp[i*6+5]);
		int col=(temp[i*6+1]<<3)+(temp[i*6+2]<<2)+(temp[i*6+3]<<1)+(temp[i*6+4]);
		int num=SBox[i*4+row][col];
		for(int j=0;j<4;j++)
			FinalR[i*4+j]=(num>>(3-j))&1;   //右移相应的位数后获得最后一位
	}
	//置换运算P
	PermutationP(FinalR);
	memcpy(FirstR,FinalR,sizeof(FinalR));
}	
//轮函数
void TurnFunc(int L[32],int R[32],int key[48])
{
	int R1[32];
	for(int i=0;i<32;i++)
		R1[i]=R[i];
	FFunc(R1,key);
	//XOR
	for(int i=0;i<32;i++)
		R1[i]=R1[i]^L[i];
	for(int i=0;i<32;i++)
	{
		L[i]=R[i];
		R[i]=R1[i];
	}
}
//密钥的产生
void GetKey(int FirstKey[8])
{
	//获得64比特位的密钥key1
	int key1[64];
	for(int i=0;i<8;i++)
		for(int j=0;j<8;j++)
			key1[i*8+j]=(FirstKey[i]>>(7-j))&1; 
	//PC1置换，去除校验位，获得56比特位的密钥key
	int key[56];
	for(int i=0;i<56;i++)
		key[i]=key1[PC1[i]-1];
	//得到C与D
	int C[56],D[56];
	for(int i=0;i<28;i++)
	{
		C[i]=C[i+28]=key[i];
		D[i]=D[i+28]=key[i+28];
	}
	int count=0;
	int temp[56];
	for(int i=0;i<16;i++)
	{
		count+=LS[i];
		//合并C和D->56位密钥temp
		for(int k=0;k<28;k++)
		{
			temp[k]=C[k+count];
			temp[k+28]=D[k+count];
		}
		//PC2置换，得到48位密钥FinalKey[i]
		for(int j=0;j<48;j++)
			FinalKey[i][j]=temp[PC2[j]-1];
	}
}

//加密
void Encrypt(int key[8],int txt[8])
{
	cout<<"-------------分组密码加密-----------"<<endl;
	cout<<"密钥为："<<endl;
	for(int i=0;i<8;i++)
		 printf("0x%02X ",key[i]);
	cout<<endl;
	cout<<"明文为："<<endl;
	for(int i=0;i<8;i++)
		 printf("0x%02X ",txt[i]);
	cout<<endl;
	//获得密钥
	GetKey(key);
	//获得64比特明文，并分组
	int str[64],L[32],R[32];
	for(int i=0;i<8;i++)
		for(int j=0;j<8;j++)
			str[i*8+j]=(txt[i]>>(7-j))&1;
	//初始置换
	InitialP(str);
	//LR分组
	for(int i=0;i<32;i++)
	{
		L[i]=str[i];
		R[i]=str[i+32];
	}
	//16轮加密
	for(int i=0;i<16;i++)
		TurnFunc(L,R,FinalKey[i]);
	//合并L、R
	for(int i=0;i<32;i++)
	{
		str[i+32]=L[i];
		str[i]=R[i];
	}
	//逆初始置换IP－1
	InitialP1(str);
	//将八个比特位合为一个十六进制数
	int out[8]={0,0,0,0,0,0,0,0};
	for(int i=0;i<8;i++)
		for(int j=0;j<8;j++)
			out[i]+=str[8*i+j]<<(7-j);
	//输出
	cout<<"密文为："<<endl;
	for(int i=0;i<8;i++)
		 printf("0x%02X ",out[i]);
	cout<<endl;
}

//解密
void Decrypt(int key[8],int txt[8])
{
	cout<<"-------------分组密码解密-----------"<<endl;
	cout<<"密钥为："<<endl;
	for(int i=0;i<8;i++)
		 printf("0x%02X ",key[i]);
	cout<<endl;
	cout<<"密文为："<<endl;
	for(int i=0;i<8;i++)
		 printf("0x%02X ",txt[i]);
	cout<<endl;
	//获得密钥
	GetKey(key);
	//获得64比特密文，并分组
	int str[64],L[32],R[32];
	for(int i=0;i<8;i++)
		for(int j=0;j<8;j++)
			str[i*8+j]=(txt[i]>>(7-j))&1;
	//初始置换
	InitialP(str);
	//LR分组
	for(int i=0;i<32;i++)
	{
		L[i]=str[i];
		R[i]=str[i+32];
	}
	//16轮解密
	for(int i=0;i<16;i++)
		TurnFunc(L,R,FinalKey[15-i]);
	//合并L、R
	for(int i=0;i<32;i++)
	{
		str[i+32]=L[i];
		str[i]=R[i];
	}
	//逆初始置换IP－1
	InitialP1(str);
	//将八个比特位合为一个十六进制数
	int out[8]={0,0,0,0,0,0,0,0};
	for(int i=0;i<8;i++)
		for(int j=0;j<8;j++)
			out[i]+=str[8*i+j]<<(7-j);
	//输出
	cout<<"明文为："<<endl;
	for(int i=0;i<8;i++)
		 printf("0x%02X ",out[i]);
	cout<<endl;
}

void main()
{
	cout<<"输入要进行加解密的明密文组的数字编码：";
	int i;
	cin>>i;
	Encrypt(cases[i].key,cases[i].txt);
	Decrypt(cases1[i].key,cases1[i].txt);
}

